{"version":3,"sources":["../server.js"],"names":["express","require","bodyParser","path","app","server","createServer","compression","use","static","join","__dirname","json","request","query","body","length","Error","graphqlConnector","schema","context","projectTeam","endpointURL","get","req","res","sendFile","listen","port","console","log"],"mappings":";;AAOA;;AACA;;;;AACA;;;;AACA;;;;AAVA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,aAAaD,QAAQ,aAAR,CAAjB;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;AACA,IAAIG,MAAMJ,SAAV;AACA,IAAIK,SAASJ,QAAQ,MAAR,EAAgBK,YAAhB,CAA6BF,GAA7B,CAAb;AACA,IAAIG,cAAcN,QAAQ,aAAR,CAAlB;;AAQA;;;AAGAG,IAAII,GAAJ,CAAQD,aAAR;;AAEA;;;AAGAH,IAAII,GAAJ,CACIR,QAAQS,MAAR,CAAeN,KAAKO,IAAL,CAAUC,SAAV,EAAqB,MAArB,CAAf,CADJ;;AAIA;;;AAGAP,IAAII,GAAJ,CAAQ,UAAR,EACIN,WAAWU,IAAX,EADJ,EAEI,0CAAe,UAACC,OAAD,EAAa;AACxB;AACA,QAAMC,QAAQD,QAAQC,KAAR,CAAcA,KAAd,IAAuBD,QAAQE,IAAR,CAAaD,KAAlD;AACA,QAAIA,SAASA,MAAME,MAAN,GAAe,IAA5B,EAAkC;AAC9B;AACA;AACA,cAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAED;AACA;AACA;AACA,QAAMC,mBAAmB,wCAAzB;;AAEA,WAAO;AACHC,uCADG;AAEHC,iBAAS;AACLC,yBAAa,+BAAaH,gBAAb;AADR;AAFN,KAAP;AAMP,CApBG,CAFJ;;AAwBA;;;AAGAd,IAAII,GAAJ,CAAQ,WAAR,EACI,2CAAgB,EAACc,aAAa,UAAd,EAAhB,CADJ;;AAIAlB,IAAImB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvBA,QAAIC,QAAJ,CAAavB,KAAKO,IAAL,CAAUC,SAAV,EAAqB,kBAArB,CAAb;AACH,CAFD;;AAIA;;;AAGAN,OAAOsB,MAAP,CAAc,uBAAO3B,OAAP,CAAe4B,IAA7B,EAAmC,YAAM;AACrCC,YAAQC,GAAR,CAAY,uBAAuB,uBAAO9B,OAAP,CAAe4B,IAAlD;AACH,CAFD","file":"server.js","sourcesContent":["var express = require('express');\nvar bodyParser = require('body-parser');\nvar path = require('path');\nvar app = express();\nvar server = require('http').createServer(app);\nvar compression = require('compression');\n\nimport { graphqlExpress, graphiqlExpress } from 'graphql-server-express';\nimport config from './server/server-config';\nimport GraphQlSchema from './server/graphql-schema';\nimport { GraphqlConnector, TeamInfo } from './server/graphql-connector';\n\n\n/**\n * Add gZip compression for served files\n */\napp.use(compression());\n\n/**\n * Serve index file from /dist folder for frontend assets\n */\napp.use(\n    express.static(path.join(__dirname, 'dist'))\n);\n\n/**\n * Add the Express GraphQl Server and set the API endpoint\n */\napp.use('/graphql',\n    bodyParser.json(),\n    graphqlExpress((request) => {\n        // Get each request sent through the Graphql server\n        const query = request.query.query || request.body.query;\n        if (query && query.length > 2000) {\n            // None of our app's queries are this long\n            // Probably indicates someone trying to send an overly expensive query\n            throw new Error('Query too large.');\n        }\n\n        // Initialize a new Graphql connector\n        // The connector is used to get a new DataLoader instance for every incoming request\n        // It uses the Graphql @context parameter to pass the new instance of DataLoader to the Graphql resolvers\n        const graphqlConnector = new GraphqlConnector();\n\n        return {\n            schema: GraphQlSchema,\n            context: {\n                projectTeam: new TeamInfo(graphqlConnector),\n            },\n        };\n}));\n\n/**\n * Add the GraphiQl query interface endpoint\n */\napp.use('/graphiql',\n    graphiqlExpress({endpointURL: '/graphql'})\n);\n\napp.get('*', (req, res) => {\n    res.sendFile(path.join(__dirname, '/dist/index.html'));\n});\n\n/**\n * Start the Express server\n */\nserver.listen(config.express.port, () => {\n    console.log('Listening on port ' + config.express.port);\n});"]}